import logging
import asyncio
import os
from dotenv import load_dotenv
from django.core.management.base import BaseCommand
from aiogram import Dispatcher
from app.telegram.management.commands.bot_instance import bot, bot_cuorier

load_dotenv()

logging.basicConfig(level=logging.DEBUG)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

dp = Dispatcher()
dp_cuorier = Dispatcher()

class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞"

    def handle(self, *args, **kwargs):
        from app.telegram.management.commands.app.bot import router as cklient
        from app.telegram.management.commands.app.courier import router as courier # –î–æ–±–∞–≤—å—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
        dp.include_router(cklient)
        dp_cuorier.include_router(courier)

        async def main():
            try:
                logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–æ–≤...")
                # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
                await bot.delete_webhook(drop_pending_updates=True)
                await bot_cuorier.delete_webhook(drop_pending_updates=True)
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                bot_task = asyncio.create_task(dp.start_polling(bot))
                courier_task = asyncio.create_task(dp_cuorier.start_polling(bot_cuorier))
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                await asyncio.gather(bot_task, courier_task)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        asyncio.run(main())