from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from asgiref.sync import sync_to_async
from django.db import IntegrityError

from app.web_app.models import CourierUser, Product, Courier, ProductStatus

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞
@router.message(Command("start"))
async def start_command(message: types.Message):
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    username = message.from_user.username

    try:
        await sync_to_async(CourierUser.objects.get_or_create)(
            chat_id=chat_id,
            defaults={'full_name': full_name, 'username': username}
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
    except IntegrityError:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä.")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞ –∏ —Ç–æ–≤–∞—Ä–∞
async def update_order_and_product_status(courier_order_id, courier_status, product_status):
    courier_order = await sync_to_async(Courier.objects.select_related('track').get)(id=courier_order_id)
    product = courier_order.track

    courier_order.status = courier_status
    await sync_to_async(courier_order.save)()

    product.status = product_status
    await sync_to_async(product.save)()

    return courier_order, product

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data.startswith("accept_order_"))
async def accept_order(callback_query: types.CallbackQuery):
    courier_order_id = int(callback_query.data.split("_")[-1])

    await update_order_and_product_status(
        courier_order_id,
        courier_status="–ü—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º",
        product_status=ProductStatus.COURIER_IN_TRANSIT
    )

    # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"
    complete_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete_order_{courier_order_id}")]
    ])

    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—É—Ç—å.")
    await callback_query.message.edit_reply_markup(reply_markup=complete_keyboard)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@router.callback_query(lambda c: c.data.startswith("complete_order_"))
async def complete_order(callback_query: types.CallbackQuery):
    courier_order_id = int(callback_query.data.split("_")[-1])

    courier_order, product = await update_order_and_product_status(
        courier_order_id,
        courier_status="–ó–∞–≤–µ—Ä—à—ë–Ω",
        product_status=ProductStatus.COMPLETED
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await callback_query.message.edit_text(
        f"üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω –Ω–∞ —Å—É–º–º—É {product.price}$.\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞! üöö"
    )
