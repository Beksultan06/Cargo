from aiogram import Router, types
from aiogram.filters import Command
from app.web_app.models import Settings
from django.utils.html import strip_tags
from app.telegram.management.commands.app.button import get_profile_courier

router = Router()

@router.message(Command('start'))
async def start(message:types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¥–ª–∞ –∫—É—Ä—å–µ—Ä–æ–≤!", reply_markup=get_profile_courier())

@router.message(lambda message: message.text == "üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.instructions) if settings and settings.instructions else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.support) if settings and settings.support else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.about) if settings and settings.about else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")