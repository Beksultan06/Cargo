from aiogram import Router, types
from aiogram.filters import Command
from app.web_app.models import ProductStatus, Settings
from django.utils.html import strip_tags
from app.telegram.management.commands.app.button import get_profile_courier
from app.telegram.management.commands.bot_instance import bot_cuorier
from aiogram.types import CallbackQuery
from app.web_app.models import Product  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
from asgiref.sync import sync_to_async

router = Router()

@router.message(Command('start'))
async def start(message:types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¥–ª–∞ –∫—É—Ä—å–µ—Ä–æ–≤!", reply_markup=get_profile_courier())

@router.message(lambda message: message.text == "üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.instructions) if settings and settings.instructions else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.support) if settings and settings.support else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.about) if settings and settings.about else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

async def send_telegram_message_cuorier(chat_id, message, track_number):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{track_number}")]
        ]
    )
    await bot_cuorier.send_message(chat_id, message, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('accept_'))
async def handle_accept_callback(callback_query: CallbackQuery):
    track_number = callback_query.data.split('_')[1]
    product = await sync_to_async(Product.objects.filter(track=track_number).first)()
    if product:
        product.status = ProductStatus.COURIER_IN_TRANSIT
        await sync_to_async(product.save)()

        await callback_query.answer("üì¶ –ü–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫—É—Ä—å–µ—Ä—É!", show_alert=True)
        await callback_query.message.edit_text(
            f"üì¶ –ü–æ—Å—ã–ª–∫–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫—É—Ä—å–µ—Ä—É! üöö"
        )
    else:
        await callback_query.answer("‚ùå –ü–æ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)