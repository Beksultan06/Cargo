from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from app.web_app.models import Settings, Product, Courier, User
from app.telegram.management.commands.bot_instance import bot_cuorier
from app.telegram.management.commands.app.button import get_profile_courier
from app.telegram.management.commands.app.states import CourierOrderStates
from django.utils.html import strip_tags
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command('start'))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤!", reply_markup=get_profile_courier())

@router.message(lambda message: message.text == "üìï–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.instructions) if settings and settings.instructions else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def send_support_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.support) if settings and settings.support else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.about) if settings and settings.about else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(CourierOrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    data = await state.get_data()
    track_number = data.get('track_number')
    address = data.get('address')

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É
        product = await sync_to_async(Product.objects.get)(track=track_number)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
        user = await sync_to_async(User.objects.get)(chat_id=message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user.full_name}, –¢—Ä–µ–∫={product.track}, –ê–¥—Ä–µ—Å={address}, –¢–µ–ª–µ—Ñ–æ–Ω={phone}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await sync_to_async(Courier.objects.create)(
            user=user,
            track=product,
            address=address,
            phone=phone,
            type_payment='–ù–∞–ª–∏—á–Ω—ã–π'
        )
        logger.info(f"–î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–∫–∞: {track_number}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
        courier_message = (
            f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.pickup_point})\n"
            f"üì¶ –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: {product.track} - {product.get_status_display()} - {product.price}$\n"
            f"üìç –ê–¥—Ä–µ—Å: {address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É
        couriers = await sync_to_async(User.objects.filter)(is_courier=True)
        for courier in await sync_to_async(list)(couriers):
            if courier.chat_id:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É {courier.full_name} (chat_id={courier.chat_id})")
                await bot_cuorier.send_message(courier.chat_id, courier_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
        product.status = 'courier_on_the_way'
        await sync_to_async(product.save)()
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product.track} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'courier_on_the_way'")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot_cuorier.send_message(user.chat_id, f"üöö –í–∞—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø—É—Ç–∏! –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
