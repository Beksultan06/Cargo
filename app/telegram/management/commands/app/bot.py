from aiogram import types, Router
from aiogram.filters import Command
from django.conf import settings
from app.telegram.management.commands.app.button import get_inline_keyboard, get_main_menu, get_profile_buttons
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from app.telegram.management.commands.app.db import get_user_by_chat_id, update_chat_id
from asgiref.sync import sync_to_async
from app.telegram.management.commands.app.states import TrackState
from app.web_app.models import Product, ProductStatus, Settings, User
from app.telegram.management.commands.run import bot
from django.db import transaction
import logging

router = Router()

@router.message(Command("start"))
async def start(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username
    full_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logging.info(f"–ü–æ–ª—É—á–µ–Ω chat_id: {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

    try:
        user = await get_user_by_chat_id(chat_id)
        if user:
            await update_chat_id(user, chat_id)
            await message.answer(
                f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=get_main_menu()
            )
            return

        registration_link = f'{settings.SITE_BASE_URL}/?chat_id={chat_id}'
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_link}")
        await message.answer(
            "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=get_inline_keyboard(registration=True, chat_id=chat_id)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def notify_registration_success(chat_id, full_name):
    try:
        await bot.send_message(
            chat_id,
            f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {full_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

@router.message(lambda message: message.text == "üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å")
async def send_profile_info(message: types.Message):
    chat_id = message.chat.id
    user = await get_user_by_chat_id(chat_id)
    if not user:
        await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    pickup_point_name = user.pickup_point.city if user.pickup_point else "–ù–µ —É–∫–∞–∑–∞–Ω"
    text = (
        "üìú *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üìú*\n\n"
        f"üÜî *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID*: `{user.id_user}`\n"
        f"üë§ *–§–ò–û*: {user.full_name}\n"
        f"üìû *–ù–æ–º–µ—Ä*: `{user.phone_number}`\n"
        f"üè° *–ê–¥—Ä–µ—Å*: {user.address}\n\n"
        f"üìç *–ü–í–ó*: {pickup_point_name}\n"
        f"üìç *–ü–í–ó —Ç–µ–ª–µ—Ñ–æ–Ω*:  [996505180600](tel:996558486448)\n"
        "üìç *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã*: \n"
        "üìç *–õ–æ–∫–∞—Ü–∏—è –Ω–∞ –ö–∞—Ä—Ç–µ*: \n\n"
        "[üåç LiderCargo (WhatsApp)](https://www.youtube.com/)"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=get_profile_buttons(chat_id))

from django.utils.html import strip_tags

@router.message(lambda message: message.text == "üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
async def forbidden_goods(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.prohibited_goods) if settings and settings.prohibited_goods else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.instructions) if settings and settings.instructions else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.about) if settings and settings.about else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "üìç –ê–¥—Ä–µ—Å–∞")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.about) if settings and settings.about else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def send_about_info(message: types.Message):
    settings = await Settings.objects.afirst()
    text = strip_tags(settings.support) if settings and settings.support else "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.answer(text, parse_mode="Markdown")

@router.message(lambda message: message.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫")
async def start_add_track(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TrackState.waiting_for_track)

@router.message(TrackState.waiting_for_track)
async def save_track(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    track_number = message.text.strip()

    if len(track_number) < 5:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    user = await sync_to_async(lambda: User.objects.filter(chat_id=chat_id).first())()
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return
    existing_product = await sync_to_async(lambda: Product.objects.filter(track=track_number).first())()
    if existing_product:
        await message.answer(f"‚ö†Ô∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–°—Ç–∞—Ç—É—Å: {existing_product.get_status_display()}")
        await state.clear()
        return
    def create_product():
        with transaction.atomic():
            product = Product.objects.create(
                user=user,
                track=track_number,
                status=ProductStatus.WAITING_FOR_ARRIVAL
            )
            return product
    product = await sync_to_async(create_product)()
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä **{track_number}** –¥–æ–±–∞–≤–ª–µ–Ω!\n–°—Ç–∞—Ç—É—Å: {product.get_status_display()}",
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.message(lambda message: message.text == "üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏")
async def show_my_packages(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user = await sync_to_async(lambda: User.objects.filter(chat_id=chat_id).first())()
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    user_products = await sync_to_async(lambda: list(Product.objects.filter(user=user)))()

    if not user_products:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—ã–ª–æ–∫.", reply_markup=get_main_menu())
        return
    text = "üì¶ –í–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏:\n\n"
    for product in user_products:
        text += f"üîπ **–¢—Ä–µ–∫:** `{product.track}`\n"
        text += f"üìç **–°—Ç–∞—Ç—É—Å:** {product.get_status_display()}\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"

    await message.answer(text, reply_markup=get_main_menu(), parse_mode="Markdown")